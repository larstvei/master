load model-checker

--- Redefine CONFIGURATION for format
mod CONFIGURATION is
    sorts Attribute AttributeSet .
    subsort Attribute < AttributeSet .
    op none : -> AttributeSet  [ctor] .
    op _,_ : AttributeSet AttributeSet -> AttributeSet
        [ctor assoc comm id: none format (d d ntsss d)] .

    --- Removed Msg
    sorts Oid Cid Object Portal Configuration .
    subsort Object Portal < Configuration .
    op <_:_|_> : Oid Cid AttributeSet -> Object [ctor object] .
    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration
        [ctor config assoc comm id: none format (d nn d)] .
    op <> : -> Portal [ctor] .
endm

--- Likewise for MAP
fmod MAP{X :: TRIV, Y :: TRIV} is
    protecting BOOL .
    sorts Entry{X,Y} Map{X,Y} .
    subsort Entry{X,Y} < Map{X,Y} .

    op _|->_ : X$Elt Y$Elt -> Entry{X,Y} [ctor] .
    op empty : -> Map{X,Y} [ctor] .
    op _,_ : Map{X,Y} Map{X,Y} -> Map{X,Y}
        [ctor assoc comm id: empty prec 121 format (d r onttssss d)] .
    op undefined : -> [Y$Elt] [ctor] .

    var D : X$Elt .
    vars R R' : Y$Elt .
    var M : Map{X,Y} .

    op insert : X$Elt Y$Elt Map{X,Y} -> Map{X,Y} .
    eq insert(D, R, (M, D |-> R')) =
      if $hasMapping(M, D) then insert(D, R, M)
        else (M, D |-> R)
        fi .
    eq insert(D, R, M) = (M, D |-> R) [owise] .

    op _[_] : Map{X,Y} X$Elt -> [Y$Elt] [prec 23] .
    eq (M, D |-> R)[D] =
      if $hasMapping(M, D) then undefined
        else R
        fi .
    eq M[D] = undefined [owise] .

    op $hasMapping : Map{X,Y} X$Elt -> Bool .
    eq $hasMapping((M, D |-> R), D) = true .
    eq $hasMapping(M, D) = false [owise] .
endfm

fmod STR is
    sort Str .
    ops a b c d e f g h i : -> Str .
endfm

view Str from TRIV to STR is
    sort Elt to Str .
endv

fmod BUFFER is
    including LIST{Str} .
    including STR .

    sort Buffer .
    subsort List{Str} < Buffer .
endfm

view Buffer from TRIV to BUFFER is
    sort Elt to Buffer .
endv

fmod ERROR is
    including BUFFER .

    sort Error .
    subsort Buffer < Error .

    op error : -> Error [format (r o)] .

    var S : Str .

    eq S error = error .
    eq error S = error .
endfm

mod UNIQUE is
    including CONFIGURATION .
    including LIST{Str} .

    sort Unique .

    subsort Unique < Configuration .

    op [ _ ] : List{Str} -> Unique .
endm

fmod USER is
    including NAT .

    sort User .
    op user_ : Nat -> User .
endfm

view User from TRIV to USER is
    sort Elt to User .
endv

mod ACTIONS is
    including CONFIGURATION .
    including USER .
    including SET{User} .
    including NAT .

    sorts Actions .
    subsort Set{User} < Actions < Configuration .

    op empty : -> Actions [ctor] .
    op _-_ : Actions Actions -> Actions [ctor assoc id: empty] .
endm

fmod ABSTRACT-OPERATION is

    sort Op .

    op nop : -> Op [ctor] .
    op nop : Op -> Op [ctor] .

    vars O O' : Op .

    op inv : Op -> Op .
    eq inv(nop) = nop .
    eq inv(inv(O)) = O .
    eq inv(O o O') = inv(O') o inv(O) .

    op _o_ : Op Op -> Op [assoc] .
    eq O o nop = O .
    eq nop o O = O .
    eq O o inv(O) = nop .
endfm

view Op from TRIV to ABSTRACT-OPERATION is
    sort Elt to Op .
endv

fmod INSERT-DELETE is
    including ABSTRACT-OPERATION .
    including NAT .
    including STR .

    sort Type .

    ops ins del comp : -> Type .
    op ins : Nat Str -> Op [ctor format (g o)] .
    op del : Nat Str -> Op [ctor format (r o)] .

    var N : Nat .
    var S : Str .
    vars O O' : Op .

    op pos : Op -> Nat .
    eq pos(ins(N, S)) = N .
    eq pos(del(N, S)) = N .

    op type : Op -> Type .
    eq type(ins(N,S)) = ins .
    eq type(del(N,S)) = del .
    eq type(O o O') = comp .
endfm

fmod TRANSFORMATION is
    including INSERT-DELETE .

    vars N N' : Nat .
    vars S S' : Str .
    vars O O' O'' : Op .

    op  it : Op Op -> Op .
    ceq it(ins(N, S), del(N', S')) = ins(N, S) if N <= N' .
    eq  it(ins(N, S), del(N', S')) = ins(sd(N, 1), S) [owise] .

    ceq it(del(N, S), del(N', S')) = del(N, S) if N < N' .
    ceq it(del(N, S), del(N', S')) = del(sd(N, 1), S) if N > N' .
    eq  it(del(N, S), del(N', S')) = nop(del(N, S) o del(N', S')) [owise] .

    ceq it(O, O' o O'') = it(it(O, O''), O') if type(O') =/= comp .
    eq  it(O, O') = O [owise] .

    op  et : Op Op -> Op .
    ceq et(ins(N, S), del(N', S')) = ins(N, S) if N <= N' .
    eq  et(ins(N, S), del(N', S')) = ins(s N, S) [owise] .

    ceq et(del(N, S), del(N', S')) = del(N, S) if N < N' .
    eq  et(del(N, S), del(N', S')) = del(s N, S) [owise] .

    eq et(nop(O o O'), O') = O .

    ceq et(O, O' o O'') = et(et(O, O'), O'') if type(O') =/= comp .
    eq  et(O, O') = O [owise] .
endfm

fmod APPLY is
    including BUFFER .
    including ERROR .
    including INSERT-DELETE .

    vars Oi Oj : Op .
    vars S T : Str .
    var B : Buffer .
    var I : Nat .

    op apply_on_ : Op Buffer -> Buffer .
    eq apply nop on B = B .

    eq apply inv(ins(I,S)) on B = apply del(I,S) on B .
    eq apply inv(del(I,S)) on B = apply ins(I,S) on B .

    eq apply ins(0, S) on B = S B .
    eq apply ins(s I, S) on T B = T (apply ins(I, S) on B) .
    eq apply ins(s I, S) on nil = error .

    eq apply del(0, S) on T B = B .
    eq apply del(s I, S) on T B = T (apply del(I, S) on B) .
    eq apply del(I, S) on B = error [owise] .

    eq apply Oi o Oj on B = apply Oi on (apply Oj on B) .

    eq apply Oi on error = error .
endfm

fmod MSG is
    including NAT .
    including ABSTRACT-OPERATION .

    sort Msg .

    op msg : Op Nat Nat -> Msg .
endfm

view Msg from TRIV to MSG is
    sort Elt to Msg .
endv

mod SITE is
    including CONFIGURATION .
    including BUFFER .
    including LIST{Msg} .
    including MSG .
    including ABSTRACT-OPERATION .
    including USER .

    sorts Site Queue .
    subsort Site < Configuration  .
    subsort List{Msg} < Queue .

    op <_|_> : User AttributeSet -> Object [ctor object] .
    op buffer :_ : Buffer -> Attribute .
    op seqno :_ : Nat -> Attribute .
    op token :_ : Nat -> Attribute .
    op in-queue :_ : Queue -> Attribute .
    op out-queue :_ : Queue -> Attribute .

    vars T T' N N' : Nat .
    vars Q Q'      : Queue .
    var  O         : Op .

    op compose : Queue -> Op .
    eq compose(nil) = nop .
    eq compose(Q msg(O, T, N)) = compose(Q) o O [owise] .

    op rejected : Queue Nat -> Queue .
    eq rejected(Q msg(O, T, N) Q', T) = Q .
    eq rejected(Q, T) = Q [owise] .

    op nextSeq : Queue Nat -> Nat .
    eq nextSeq(msg(O, T, N') Q, N) = s N + sd(N, N') .
endm

view Queue from TRIV to SITE is
    sort Elt to Queue .
endv

mod SITE-RULES is
    including ACTIONS .
    including APPLY .
    including BUFFER .
    including LIST{Msg} .
    including MSG .
    including ABSTRACT-OPERATION .
    including USER .
    including UNIQUE .
    including SITE .

    vars B B' B'' : Buffer .
    vars T T' N M : Nat .
    vars U U' : Set{User} .
    var R : Actions .
    var Q : Queue .
    var O : Op .
    var S : Str .
    var A : AttributeSet .

    rl [user-inserts] :
        ((U, U') - R)
        [ S B'' ]
        < U | buffer : (B B'), seqno : N, token : T, out-queue : Q, A >
      =>
        R
        [ B'' ]
        < U | buffer : (B S B'), seqno : s N, token : T,
              out-queue : (msg(ins(size(B), S), T, N) Q), A > .

    rl [user-deletes] :
        ((U, U') - R)
        < U | buffer : (B S B'), seqno : N, token : T, out-queue : Q, A >
      =>
        R
        < U | buffer : (B B'), seqno : s N, token : T,
              out-queue : (msg(del(size(B), S), T, N) Q), A > .

    crl [user-receive] :
        < U | buffer : B, seqno : N, token : T, in-queue : (Q msg(O,T',N)), A >
      =>
        < U | buffer : B', seqno : s N, token : T', in-queue : Q, A >
      if B' := apply O on B .

    crl [user-receive-reject] :
        < U | buffer : B, seqno : N, in-queue : (Q msg(O,T',M)), A >
      =>
        < U | buffer : B, seqno : s N, in-queue : Q, A >
      if N =/= M .
endm

fmod ORDERING is
    including ABSTRACT-OPERATION .
    including BOOL .
    including INSERT-DELETE .
    including NAT .
    including SET{User} .

    sort Event .

    op ____ : Op Nat Nat Set{User} -> Event .

    vars T T' M M' : Nat .
    vars E E' : Event .
    vars O O' : Op .
    vars U U' : Set{User} .

    op concurrent : Event Event -> Bool .
    eq concurrent(O T M U, O' T' M' U') =
        intersection(U, U') == empty and
        ((T <= T' and T' <= M) or (T' <= T and T <= M')) .

    op _<_ : Event Event -> Bool .
    ceq O T M U < O' T' M' U' = pos(O) > pos(O')
        or (pos(O) == pos(O') and type(O) =/= type(O') and type(O) == del)
        or (pos(O) == pos(O') and type(O) == type(O') and M < M')
      if concurrent(O T M U, O' T' M' U') .
    eq O T M U < O' T' M' U' = M < M' [owise] .

    op _>_ : Event Event -> Bool .
    eq E > E' = E' < E .
endfm

view Event from TRIV to ORDERING is
    sort Elt to Event .
endv

fmod HISTORY is
    including ORDERING .
    including LIST{Event} .
    including TRANSFORMATION .

    sort History .
    subsort List{Event} < History .

    vars M N T M' N' T' : Nat .
    vars O O' O'' O''' : Op .
    vars H H' H'' : History .
    vars U U' : User .
    vars E E' : Event .

    op  collect : Event History -> History .
    eq  collect(E, nil) = nil .
    ceq collect(E, E' H) = E' collect(E, H) if concurrent(E, E') .
    eq  collect(E, E' H) = nil [owise] .

    op  drop : Event History -> History .
    eq  drop(E, nil) = nil .
    ceq drop(E, E' H) = drop(E, H) if concurrent(E, E') .
    eq  drop(E, E' H) = E' H [owise] .

    op  put : Event History -> History .
    eq  put(E, H) = put'(E, collect(E, H)) drop(E, H) .

    op  put' : Event History -> History .
    eq  put'(E, nil) = E .
    ceq put'(E, H E') = H E' E if E < E' .
    eq  put'(E, H E') = put'(E, H) E' [owise] .

    op compose : History -> Op .
    eq compose(nil) = nop .
    eq compose((nop(O) T M U) H) = compose(H) .
    eq compose((O T M U) H) = O o compose(H) [owise] .

    op  until : History Nat -> History .
    eq  until(nil, T') = nil .
    ceq until(H (O T M U), T') = H (O T M U) if M >= T' .
    eq  until(H (O T M U), T') = until(H, T') [owise] .

    op mintoken : History -> Nat .
    eq mintoken(O T M U) = T .
    eq mintoken((O T M U) H) = min(T, mintoken(H)) [owise] .

    op  fix : History -> History .
    eq  fix(nil) = nil .
    ceq fix((O T M U) H) = (O' T M U) H'
      if H'   := fix(H) /\
         H''  := filter(O T M U, H') /\
         O''' := compose(opsIn(U, T, mintoken(H''), H')) /\
         O''  := et(O, O''') /\
         O'   := it(it(O'', compose(H'')), O''') .

    op  filter : Event History -> History .
    eq  filter(E, nil) = nil .
    ceq filter(E, E' H) = E' filter(E, H) if concurrent(E, E') .
    eq  filter(E, (O T M U') H) = filter(E, H) [owise] .

    op  opsIn : User Nat Nat History -> History .
    eq  opsIn(U, T, T', nil) = nil .
    ceq opsIn(U, T, T', (O N M U') H) = (O N M U') opsIn(U', T, T', H)
      if (M < T and M >= T') or (U == U' and T == N) .
    eq  opsIn(U, T, T', E H) = opsIn(U, T, T', H) [owise] .
endfm

mod SERVER is
    including CONFIGURATION .
    including MAP{User,Queue} .
    including NAT .
    including HISTORY .

    op < server |_> : AttributeSet -> Object [ctor object] .
    op history :_ : History -> Attribute .
    op state :_ : Nat -> Attribute .
    op sites :_ : Map{User,Queue} -> Attribute .
endm

mod SEND is
    including CONFIGURATION .
    including LIST{Msg} .
    including MAP{User,Queue} .
    including SERVER .
    including SITE .
    including HISTORY .

    sort Send .
    subsort Send < Configuration .

    op send_to_ : Op Map{User,Queue} -> Send .

    vars A A' : AttributeSet .
    vars O O' : Op .
    vars T T' N : Nat .
    vars US US' : Map{User,Queue} .
    vars Q Q' : Queue .
    var U : User .

    eq [send] : send O to empty = none .
    eq [send] :
        < U | in-queue : Q, A >
        < server | state : T, sites : (U |-> msg(O', T', N) Q', US'), A' >
        send O to (U |-> msg(O', T', N) Q', US)
      =
        < U | in-queue : (msg(O, T, N) Q), A >
        < server | state : T, sites : (U |-> msg(O, T, s N) msg(O', T', N) Q', US'), A' >
        send O to US .
endm

mod SERVER-RULES is
    including CONFIGURATION .
    including LIST{Msg} .
    including MAP{User,Queue} .
    including ABSTRACT-OPERATION .
    including SEND .
    including SERVER .
    including SITE .
    including HISTORY .

    vars A A' : AttributeSet .
    vars Q Q' Q'' : Queue .
    vars O O' O'' : Op .
    vars T M S S' : Nat .
    var U  : User .
    var E : Event .
    vars H H' : History .
    vars US US' : Map{User,Queue} .

    op makeOp : History History Nat -> Op .
    eq makeOp(H', H, T) = compose(until(H', T)) o inv(compose(until(H, T))) .

    op makeResponse : Op Op Queue Nat -> Op .
    eq makeResponse(O, O', Q, T) = O' o compose(rejected(Q, T)) o inv(O) .

    crl [server-receive] :
        < U | out-queue : (Q msg(O, T, S)), in-queue : Q', A >
        < server | history : H, state : M, sites : (U |-> Q'', US), A' >
      =>
        < U | out-queue : Q,
              in-queue  : (msg(O'', s M, S') Q'), A >
        < server | history : H', state : s M, sites : US', A' >
        (send O' to US)
      if  H'  := fix(put(O T M U, H)) /\
          O'  := makeOp(H', H, T) /\
          S'  := nextSeq(Q'', S) /\
          O'' := makeResponse(O, O', Q'', T) /\
          US' := (U |-> msg(O'', s M, s S'), US) .
endm

mod PREDICATES is
    including APPLY .
    including BUFFER .
    including CONFIGURATION .
    including LTL-SIMPLIFIER .
    including MODEL-CHECKER .
    including SATISFACTION .
    including SERVER .
    including SET{Buffer} .
    including SITE .
    including HISTORY .

    subsort Configuration < State .

    ops consistent : -> Prop .

    var A : AttributeSet .
    var B : Buffer .
    var U : User .
    var C : Configuration .
    var H : History .

    op buffers : Configuration -> Set{Buffer} .
    eq buffers(< U | buffer : B, A > C) = B, buffers(C) .
    eq buffers(C) = empty [owise] .

    eq C |= consistent = | buffers(C) | <= 1 .
    eq C |= consistent = false [owise] .

    op legal : Buffer -> Prop .
    eq < server | history : H, A > C |= legal(B) =
        apply compose(H) on B =/= error .
    eq C |= legal(B) = false [owise] .
endm

mod TEST is
    including ACTIONS .
    including APPLY .
    including BUFFER .
    including CONFIGURATION .
    including ERROR .
    including MSG .
    including ABSTRACT-OPERATION .
    including PREDICATES .
    including SERVER .
    including SERVER-RULES .
    including SITE .
    including SITE-RULES .
    including STR .
    including SET{Buffer} .
    including HISTORY .
    including TRANSFORMATION .
    including UNIQUE .
    including USER .

    var C : Configuration .
    vars T T' N N' I : Nat .
    vars O O' : Op .
    vars Q Q' : Queue .
    var U : User .
    var US : Map{User,Queue} .
    vars A A' : AttributeSet .
    vars B B' B'' : Buffer .
    vars Oi Oj : Op .
    var S : Str .
    vars H H' : History .

    op init  : -> Configuration .
    eq init = init nil 2 3 .

    op init_ : Buffer -> Configuration .
    eq init B = init B 2 3 .

    op init__ : Buffer Nat -> Configuration .
    eq init B N = init B N 3 .

    op init___ : Buffer Nat Nat -> Configuration .
    eq init B N N' =
        [ a b c d e ]
        (actions 0 N N')
        < server | history : nil, state : 1,
                   sites : sites N >
        clients B N .

    op clients__ : Buffer Nat -> Configuration .
    eq clients B 0 = none .
    eq clients B s N =
        < user N | buffer : B, seqno : 0, token : 0, out-queue : nil, in-queue : nil >
        clients B N .

    op sites_ : Nat -> Map{User,Queue} .
    eq sites 0 = empty .
    eq sites s N = user N |-> msg(nop, 0, 0), sites N .

    op actions___ : Nat Nat Nat -> Actions .
    eq actions N I N = empty .
    eq actions N I N' = users(min(s N, I)) - actions s N I N' [owise] .

    op users : Nat -> Set{User} .
    eq users(0) = empty .
    eq users(s N) = user N, users(N) .
endm
