view Oid from TRIV to CONFIGURATION is
  sort Elt to Oid .
endv

mod GLOBAL is
    including NAT .
    including LIST{Nat} .
    including CONFIGURATION .
    including STRING .
    sorts NextStr Str .
    subsort NextStr < Configuration .
    subsort Nat < Str .
    subsort String < Oid .

    op next_ : Str       -> NextStr [format (n s n)] .
    op max   : List{Nat} -> Nat .

    var N : Nat .
    var L : List{Nat} .

    eq max(N)   = N .
    eq max(N L) = if N > max(L) then N else max(L) fi .
endm

mod MSG is
    including GLOBAL .

    sort MsgContent .

    op ack : -> Msg [ctor] .
    op ins : Str Nat Nat -> MsgContent [ctor] .
    op del : Nat Nat Nat -> MsgContent [ctor] .

    msg _from_to_ : MsgContent Oid Oid -> Msg
    [format (r d d d d o)] .
endm

mod QUEUE is
    including MSG .
    sort MsgQueue .
    subsort Msg < MsgQueue .

    op empty : -> MsgQueue [ctor] .
    op _~_   : MsgQueue MsgQueue -> MsgQueue [ctor assoc id: empty] .
endm

mod SERVER is
    including QUEUE .
    including SET{Oid} .

    sort Server .

    op <_: Server | clients :_> : Oid Set{Oid} -> Object
        [format (n s s s s s s s s n)] .
endm

mod CLIENT is
    including SERVER .

    sorts Client Content .
    subsort List{Nat} < Content .

    op ins_at_in_ : Str Nat    Content -> Content .
    op del_at_in_ : Nat Nat    Content -> Content .
    op receive__  : MsgContent Content -> Content .

    op <_: Client | content :_, seqNo :_, out :_, in :_> :
        Oid Content Nat MsgQueue MsgQueue -> Object
        [format (n s s s s n++i s s s ni s s s ni s s s ni-- s s s n)] .

    var C      : Content .
    var S      : Str .
    vars I M N : Nat .

    eq ins S at 0 in C   = S C .
    eq ins S at s I in C = head(C) (ins S at I in tail(C)) .

    *** Assuming N is 1, change this later?
    eq del 1 at 0 in C   = tail(C) .
    eq del 1 at s I in C = head(C) (del 1 at I in tail(C)) .

    eq receive ins(S,I,N) C = ins S at I in C .
    eq receive del(M,I,N) C = del M at I in C .
endm

mod SERVER-RULES is
    including CLIENT .

    sort Multicast .
    subsort Multicast < Configuration .

    op multicast_from_to_ : MsgContent Oid Set{Oid} -> Multicast .

    vars Q Q' : MsgQueue .
    vars O O' : Oid .
    var  N    : Nat .
    var  C    : Content .
    var  CS   : Set{Oid} .
    var  M    : MsgContent .

    rl [server-receive] :
        < O  : Client | content : C, seqNo : N, out : Q ~ (M from O to O'), in : Q' >
        < O' : Server | clients : CS >
      =>
        < O  : Client | content : C, seqNo : N, out : Q, in : Q' >
        < O' : Server | clients : CS >
        multicast M from O' to CS .

    eq multicast M from O' to empty = none .

    eq < O : Client | content : C, seqNo : N, out : Q', in : Q >
        multicast M from O' to (O, CS)
      =
       < O : Client | content : C, seqNo : N, out : Q', in : (M from O' to O) ~ Q >
        multicast M from O' to CS .
endm

mod CLIENT-RULES is
    including SERVER-RULES .

    vars O O' : Oid .
    vars C C' : Content .
    vars Q Q' : MsgQueue .
    var CS    : Set{Oid} .
    var S     : Str .
    var N     : Nat .
    var M     : MsgContent .

    rl [user-inserts] :
        < O  : Client | content : C C', seqNo : N, out : Q, in : Q' >
        < O' : Server | clients : CS >
        next S
      =>
        < O  : Client | content : C C', seqNo : s N, out :
                        (ins(S, size(C), N) from O to O') ~ Q, in : Q' >
        < O' : Server | clients : CS >
        next s S .

    rl [user-deletes] :
        < O  : Client | content : C S C', seqNo : N, out : Q, in : Q' >
        < O' : Server | clients : CS >
      =>
        < O  : Client | content : C S C', seqNo : s N , out :
                        (del(1, size(C), N) from O to O') ~ Q, in : Q' >
        < O' : Server | clients : CS > .

    rl [user-receive] :
        < O : Client | content : C, seqNo : N, out : Q', in : Q ~ (M from O' to O) >
      =>
        < O : Client | content : receive M C, seqNo : N, out : ack ~ Q', in : Q > .
endm

mod TEST is
    including CLIENT-RULES .

    subsort String < Oid .

    op init : Content -> Configuration .   --- a suitable initial state

    var C : Content .

    eq init(C) =
        < "S"  : Server | clients : "C1", "C2" >
        < "C1" : Client | content : C, seqNo : 0, out : empty, in : empty >
        < "C2" : Client | content : C, seqNo : 0, out : empty, in : empty >
        next if C == nil then 0 else s(max(C)) fi .
endm

*** Commands:

*** (search[1] init(nil) =>* < "C1" : Client | content : 3 0 > C:Configuration .)
*** (search[1] init(nil) =>* < "C1" : Client | content : (head(nil)(ins 1 at 0 in tail(nil))) > C:Configuration .)
