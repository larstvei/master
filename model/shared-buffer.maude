load prelude .
load model-checker.maude .
load full-maude .

(omod MSG is
    including NAT .
    including STRING .
    sorts Msg MsgContent Str .
    subsort String < Oid .
    subsort Nat < Str .
    op ack : -> MsgContent [ctor] .
    op ins : Nat Str -> MsgContent [ctor] .
    op del : Nat Nat -> MsgContent [ctor] .

    msg _from_to_ : MsgContent Oid Oid -> Msg .
endom)

(omod CHANNEL is
    including MSG .
    sort MsgQueue .
    subsort Msg < MsgQueue .

    op empty : -> MsgQueue [ctor] .
    op _~_   : MsgQueue MsgQueue -> MsgQueue [ctor assoc id: empty] .
endom)

(omod SERVER is
    including CHANNEL .

    class Server | chan : MsgQueue .
endom)

(omod CLIENT is
    including SERVER .
    including LIST{Nat} .

    sort Content .
    subsort List{Nat} < Content .

    class Client | content : Content, seqNo : Str .

    vars C C' : Content .
    vars O O' : Oid .
    var S     : Str .
    var MS    : MsgQueue .

    rl [insert] :
        < O  : Client | content : C C', seqNo : S >
        < O' : Server | chan : MS >
      =>
        < O  : Client | content : C S C', seqNo : s S >
        < O' : Server | chan : (ins(S, size(C)) from O to O') ~ MS > .

    rl [deletion] :
        < O : Client | content : C S C' >
        < O' : Server | chan : MS >
      =>
        < O : Client | content : C C' >
        < O' : Server | chan : (del(size(C), 1) from O to O') ~ MS > .
endom)

(omod TEST is
    including CLIENT .
    including SERVER .
    subsort String < Oid .
    op init : Content -> Configuration .   --- a suitable initial state

    var C : Content .

    eq init(C) = < "Client1" : Client | content : C, seqNo : 0 > .
endom)

*** Commands:

(search[1] init(nil) =>* < "Client1" : Client | content : 3 0 > .)
