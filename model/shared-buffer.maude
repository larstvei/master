load prelude .
load model-checker.maude .
load full-maude .

(omod GLOBAL is
    including NAT .
    including LIST{Nat} .
    sorts NextStr Str .
    subsort NextStr < Configuration .
    subsort Nat < Str .

    op next : Str       -> NextStr .
    op max  : List{Nat} -> Nat .

    var N : Nat .
    var L : List{Nat} .

    eq max(N)   = N .
    eq max(N L) = if N > max(L) then N else max(L) fi .
endom)

(omod MSG is
    including GLOBAL .
    including STRING .

    sorts MsgContent .
    subsort String < Oid .

    op ack : -> MsgContent [ctor] .
    op ins : Str Nat -> MsgContent [ctor] .
    op del : Nat Nat -> MsgContent [ctor] .

    msg _from_to_ : MsgContent Oid Oid -> Msg .
endom)

(omod CHANNEL is
    including MSG .
    sort MsgQueue .
    subsort Msg < MsgQueue .

    op empty : -> MsgQueue [ctor] .
    op _~_   : MsgQueue MsgQueue -> MsgQueue [ctor assoc id: empty] .
endom)

(omod SERVER is
    including CHANNEL .
    including SET{Oid} .

    class Server | chan : MsgQueue, clients : Set{Oid} .
endom)

(omod CLIENT is
    including SERVER .

    sort Content .
    subsort List{Nat} < Content .

    op ins_at_in_ : Str Nat Content    -> Content .
    op del_at_in_ : Nat Nat Content    -> Content .
    op receive__  : MsgContent Content -> Content .

    class Client | content : Content, seqNo : Nat .

    var S       : Str .
    var M       : MsgContent .
    var MS      : MsgQueue .
    vars C C'   : Content .
    vars O O'   : Oid .
    vars I N N' : Nat .

    eq ins S at 0 in C   = S C .
    eq ins S at s I in C = head(C) (ins S at I in tail(C)) .

    *** Assuming N is 1, change this later?
    eq del 1 at 0 in C   = tail(C) .
    eq del 1 at s I in C = head(C) (del 1 at I in tail(C)) .

    eq receive ins(S,I) C = ins S at I in C .
    eq receive del(N,I) C = del N at I in C .

    rl [user-inserts] :
        < O  : Client | content : C C', seqNo : N' >
        < O' : Server | chan : empty >
        next(S)
      =>
        < O  : Client | content : C C', seqNo : s N' >
        < O' : Server | chan : (ins(S, size(C)) from O to O') >
        next(s S) .

    rl [user-deletes] :
        < O  : Client | content : C S C', seqNo : N' >
        < O' : Server | chan : empty >
      =>
        < O  : Client | seqNo : s N' >
        < O' : Server | chan : (del(1, size(C)) from O to O') > .

    rl [receive] :
        < O  : Client | content : C >
        < O' : Server | chan : MS ~ (M from O to O') >
      =>
        < O  : Client | content : receive M C >
        < O' : Server | chan : MS > .
endom)

(omod TEST is
    including CLIENT .
    subsort String < Oid .

    op init : Content   -> Configuration .   --- a suitable initial state

    var C : Content .

    eq init(C) =
        < "S"  : Server | chan : empty, clients : "C1" >
        < "C1" : Client | content : C, seqNo : 0 >
        next(if C == nil then 0 else s(max(C)) fi) .
endom)

*** Commands:

(search[1] init(nil) =>* < "C1" : Client | content : 3 0 > C:Configuration .)
