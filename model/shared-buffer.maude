load model-checker

mod CONFIGURATION is
    sorts Attribute AttributeSet .
    subsort Attribute < AttributeSet .
    op none : -> AttributeSet  [ctor] .
    op _,_ : AttributeSet AttributeSet -> AttributeSet
        [ctor assoc comm id: none format (s s n s)] .

    sorts Oid Cid Object Msg Portal Configuration .
    subsort Object Msg Portal < Configuration .
    op <_:_|_> : Oid Cid AttributeSet -> Object [ctor object format (n s s s s n n n)] .
    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration [ctor config assoc comm id: none] .
    op <> : -> Portal [ctor] .
endm

view Oid from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv

mod GLOBAL is
    including NAT .
    including LIST{Nat} .
    including CONFIGURATION .
    including STRING .

    sorts NextStr Str System .

    subsort  Nat             < Str .
    subsort  String          < Oid .
    subsorts NextStr System  < Configuration .

    op {_}   : Configuration -> System .
    op max   : List{Nat}     -> Nat .
    op next_ : Str           -> NextStr [format (n s n)] .

    var N : Nat .
    var L : List{Nat} .

    eq max(N)   = N .
    eq max(N L) = if N > max(L) then N else max(L) fi .
endm

mod MSG is
    including GLOBAL .

    sort Operation .

    op ack : Nat -> Msg [ctor] .
    op nop : -> Operation [ctor] .
    op ins : Str Nat Nat -> Operation [ctor] .
    op del : Nat Nat Nat -> Operation [ctor] .
    op seq : Operation -> Nat .

    var S       : Str .
    vars I N N' : Nat .

    eq seq(ins(S,N',N)) = N .
    eq seq(del(N',I,N)) = N .

    msg _from_to_ : Operation Oid Oid -> Msg
    [format (r d d d d o)] .
endm

mod QUEUE is
    including MSG .
    sort MsgQueue .
    subsort Msg < MsgQueue .

    op empty : -> MsgQueue [ctor] .
    op _~_   : MsgQueue MsgQueue -> MsgQueue [ctor assoc id: empty] .
endm

mod OPERATIONS is
    including QUEUE .

    sort Content .
    subsort List{Nat} < Content .

    op ins_at_in_  : Str Nat    Content   -> Content .
    op del_at_in_  : Nat Nat    Content   -> Content .
    op receive__   : Operation  Content   -> Content .
    op transform__ : Operation  Operation -> Operation .

    var C               : Content .
    vars S S'           : Str .
    vars O O'           : Operation .
    vars I I' M M' N N' : Nat .

    eq ins S at 0 in C   = S C .
    eq ins S at s I in C = head(C) (ins S at I in tail(C)) .

    *** Assuming N is 1, change this later?
    eq del 1 at 0 in C   = tail(C) .
    eq del 1 at s I in C = head(C) (del 1 at I in tail(C)) .

    eq receive nop C = C .
    eq receive ins(S,I,N) C = ins S at I in C .
    eq receive del(M,I,N) C = del M at I in C .

    ceq transform ins(S,I,N) ins(S',I',N') = ins(S,I,N) if I < I' .
    ceq transform ins(S,I,N) ins(S',I',N') = ins(S,s I,N) if I > I' .
    ceq transform ins(S,I,N) ins(S',I',N') = ins(S,s I,N) if N > N' .
    eq  transform ins(S,I,N) ins(S',I',N') = ins(S,I,N) [owise] .

    ceq transform ins(S,I,N) del(M,I',N') = ins(S,I,N) if I < I' .
    eq  transform ins(S,I,N) del(M,I',N') = ins(S,sd(I,1),N) [owise] .

    ceq transform del(M,I,N) ins(S,I',N') = del(M,I,N) if I < I' .
    eq  transform del(M,I,N) ins(S,I',N') = del(M,s I,N) [owise] .

    ceq transform del(M,I,N) del(M',I',N') = del(M,I,N) if I < I' .
    ceq transform del(M,I,N) del(M',I',N') = del(M,sd(I,1),N) if I > I' .

    eq  transform O O' = nop [owise] .
endm

mod SERVER is
    including OPERATIONS .
    including SET{Oid} .

    op Server : -> Cid .
    op clients :_ : Set{Clientdata} -> Attribute .

endm

mod CLIENT is
    including SERVER .

    op Client : -> Cid .
    op content :_     : Content -> Attribute .
    op seqNo :_       : Nat     -> Attribute .
    op out-channel :_ : MsgQueue -> Attribute .
    op in-channel :_  : MsgQueue -> Attribute .
    op operations-left :_ : Nat -> Attribute .
endm

mod SERVER-RULES is
    including CLIENT .

    sort Multicast .
    subsort Multicast < Configuration .

    op multicast_from_to_ : Operation Oid Set{Oid} -> Multicast .

    vars Q Q' : MsgQueue .
    vars O O' : Oid .
    vars N N' : Nat .
    var  CS   : Set{Oid} .
    var  C    : Content .
    var  M    : Operation .

    rl [server-receive] :
        < O  : Client | content : C,
                        seqNo : N,
                        out-channel : Q ~ (M from O to O'),
                        in-channel : Q',
                        operations-left : N' >
        < O' : Server | clients : O, CS >
      =>
        < O  : Client | content : C,
                        seqNo : N,
                        out-channel : Q,
                        in-channel : Q',
                        operations-left : N' >
        < O' : Server | clients : O, CS >
        multicast M from O' to CS .

    eq multicast M from O' to empty = none .

    eq < O : Client | content : C,
                      seqNo : N,
                      out-channel : Q',
                      in-channel : Q,
                      operations-left : N' >
        multicast M from O' to (O, CS)
      =
        < O : Client | content : C,
                       seqNo : N,
                       out-channel : Q',
                       in-channel : (M from O' to O) ~ Q,
                       operations-left : N' >
        multicast M from O' to CS .
endm

mod CLIENT-RULES is
    including SERVER-RULES .

    vars C C'     : Content .
    vars O O'     : Oid .
    vars N N'     : Nat .
    vars S S'     : Str .
    vars Q Q'     : MsgQueue .
    var CS        : Set{Oid} .
    var NZ        : NzNat .
    var M         : Operation .

    rl [user-inserts] :
        < O  : Client | content : C C',
                        seqNo : N,
                        out-channel : Q,
                        in-channel : Q',
                        operations-left : NZ >
        < O' : Server | clients : CS >
        next S
      =>
        < O  : Client | content : C S C',
                        seqNo : s N,
                        out-channel : (ins(S, size(C), N) from O to O') ~ Q,
                        in-channel : Q',
                        operations-left : sd(NZ, 1) >
        < O' : Server | clients : CS >
        next s S .

    rl [user-deletes] :
        < O  : Client | content : C S C',
                        seqNo : N,
                        out-channel : Q,
                        in-channel : Q',
                        operations-left : NZ >
        < O' : Server | clients : CS >
      =>
        < O  : Client | content : C C',
                        seqNo : s N,
                        out-channel : (del(1, size(C), N) from O to O') ~ Q,
                        in-channel : Q',
                        operations-left : sd(NZ, 1) >
        < O' : Server | clients : CS > .

    rl [user-receive] :
        < O : Client | content : C,
                       seqNo : N,
                       out-channel : Q',
                       in-channel : Q ~ (M from O' to O),
                       operations-left : N' >
      =>
        < O : Client | content : receive M C,
                       seqNo : N,
                       out-channel : ack(seq(M)) ~ Q',
                       in-channel : Q,
                       operations-left : N' > .
endm

mod TEST is
    including CLIENT-RULES .

    subsort String < Oid .

    op init          :                  -> Configuration .
    op init__        : Content Set{Oid} -> Configuration .
    op initclients__ : Content Set{Oid} -> Configuration .

    var O  : Oid .
    var C  : Content .
    var CF : Configuration .
    var CS : Set{Oid} .

    eq init = init nil ("C1","C2") .

    eq init C CS =
        { < "S" : Server | clients : CS >
          (initclients C CS)
          next if C == nil then 0 else s(max(C)) fi } .

    eq initclients C empty   = none .
    eq initclients C (O, CS) =
        < O : Client | content : C,
                       seqNo : 0,
                       out-channel : empty,
                       in-channel : empty,
                       operations-left : 3 >
        (initclients C CS) .
endm

mod PREDICATES is
    including TEST .
    including SATISFACTION .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .

    subsort Configuration < State .

    ops consistent inconsistent : -> Prop .
    op  ot-function : -> Prop .

    vars C C'          : Content .
    vars O O'          : Oid .
    vars N N' N'' N''' : Nat .
    vars Q Q' Q'' Q''' : MsgQueue .
    var  CF            : Configuration .
    var  S             : System .
    vars OI OJ : Operation .

    ceq { < O  : Client | content : C,
                          seqNo : N,
                          out-channel : Q,
                          in-channel : Q',
                          operations-left : N' >
          < O' : Client | content : C',
                          seqNo : N'',
                          out-channel : Q'',
                          in-channel : Q''',
                          operations-left : N''' >
          CF } |= inconsistent = true if C =/= C' .

    eq S |= inconsistent = false [owise] .

    eq S |= consistent = not S |= inconsistent .

    ceq { < O  : Client | content : receive (transform OI OJ) (receive OJ C),
                          seqNo : N,
                          out-channel : Q,
                          in-channel : Q',
                          operations-left : N' >
          < O' : Client | content : receive (transform OJ OI) (receive OI C),
                          seqNo : N'',
                          out-channel : Q'',
                          in-channel : Q''',
                          operations-left : N''' >
          CF } |= ot-function = false
        if receive (transform OI OJ) (receive OJ C) =/=
            receive (transform OJ OI) (receive OI C) .

    eq S |= ot-function = true [owise] .
endm

mod LOOP-STATE is
    including PREDICATES .

    op endstate : Configuration -> Bool .

    vars CF I : Configuration .
    vars Q Q' : MsgQueue .
    vars M M' : Msg .
    vars N N' : Nat .
    var O     : Oid .
    var NZ    : NzNat .
    var C     : Content .
    var CS    : Set{Oid} .

    eq endstate(< O : Client | content : C,
                               seqNo : N,
                               out-channel : Q,
                               in-channel : Q',
                               operations-left : NZ > CF) = false .

    eq endstate( < O : Client | content : C,
                                seqNo : N,
                                out-channel : M ~ Q,
                                in-channel : Q',
                                operations-left : 0 > CF) = false .

    eq endstate( < O : Client | content : C,
                                seqNo : N,
                                out-channel : Q,
                                in-channel : M ~ Q',
                                operations-left : 0 > CF) = false .

    eq endstate(CF) = true [owise] .

    crl { < O : Server | clients : CS > CF }
      =>
        init nil CS
      if endstate(CF) and ({ < O : Server | clients : CS > CF } |= consistent) .
endm
