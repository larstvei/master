load model-checker

--- Redefine CONFIGURATION in order to add formatting to objects.
mod CONFIGURATION is
    sorts Attribute AttributeSet .
    subsort Attribute < AttributeSet .
    op none : -> AttributeSet  [ctor] .
    op _,_ : AttributeSet AttributeSet -> AttributeSet
        [ctor assoc comm id: none format (s s n s)] .

    sorts Oid Cid Object Msg Portal Configuration .
    subsort Object Msg Portal < Configuration .
    op <_:_|_> : Oid Cid AttributeSet -> Object [ctor object format (n s s s s n n n)] .
    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration [ctor config assoc comm id: none] .
    op <> : -> Portal [ctor] .
endm

view Oid from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv

--- A string, in our model, is simply a blob; we are not interested in the
--- contents of it. We want every string to be unique, so we model strings
--- using natural numbers. NextStr keeps a single string, that should always be
--- unique (i.e. it has not occurred in any buffer before).

--- System just provides a way of encapsulating a configuration. This is useful
--- when we check for properties that concerns the entire configuration (not
--- just a subset).
mod GLOBAL is
    including NAT .
    including CONFIGURATION .
    including STRING .

    sorts NextStr Str System .

    subsort  Nat             < Str .
    subsort  String          < Oid .
    subsorts NextStr System  < Configuration .

    op {_}   : Configuration -> System .
    op next_ : Str           -> NextStr [format (n s n)] .
endm

--- Messages take the form of operations and acks. The server should perform
--- transformations and redistribute messages, clients should generate messages
--- and receive (possibly transformed) messages.
mod MSG is
    including GLOBAL .

    sort Operation .

    op ack : Nat -> Msg [ctor] .
    op nack : Nat -> Msg [ctor] .
    op nop : -> Operation [ctor] .
    op ins : Str Nat Nat -> Operation [ctor] .
    op del : Nat Nat Nat -> Operation [ctor] .
    op seq : Operation -> Nat .
    op assignSeqNo : Operation Nat -> Operation .

    var S : Str .
    vars I N N' N'' : Nat .

    eq seq(ins(S,N',N)) = N .
    eq seq(del(N',I,N)) = N .

    eq assignSeqNo(ins(N', S, N''), N) = ins(N', S, N) .
    eq assignSeqNo(del(N', I, N''), N) = del(N', I, N) .

    msg _from_to_ : Operation Oid Oid -> Msg
    [format (r d d d d o)] .
endm

--- A simple message queue.
mod QUEUE is
    including MSG .
    sort MsgQueue .
    subsort Msg < MsgQueue .

    op empty : -> MsgQueue [ctor] .
    op _~_   : MsgQueue MsgQueue -> MsgQueue [ctor assoc id: empty] .
endm

view Operation from TRIV to MSG is
    sort Elt to Operation .
endv

--- Operations works on buffers (NOTE: remember to rename). We have two types
--- of operations, insertions and deletions. Operations can be received, if so,
--- they are applied. Given two operations, they can be transformed in a way
--- that satisfy the property
---     T(Oi, Oj) = T(Oj, Oi)
mod OPERATIONS is
    including QUEUE .
    including LIST{Nat} .
    including LIST{Operation} .

    sort Content .
    subsort List{Nat} < Content .

    op ins_at_in_      : Str Nat    Content        -> Content .
    op del_at_in_      : Nat Nat    Content        -> Content .
    op receive__       : Operation  Content        -> Content .
    op transform__     : Operation  Operation      -> Operation .
    op transformlist__ : Operation List{Operation} -> Operation .

    var C               : Content .
    vars S S'           : Str .
    vars O O'           : Operation .
    vars OS             : List{Operation} .
    vars I I' M M' N N' : Nat .

    eq ins S at 0 in C   = S C .
    eq ins S at s I in C = head(C) (ins S at I in tail(C)) .

    *** Assuming N is 1, change this later?
    eq del 1 at 0 in C   = tail(C) .
    eq del 1 at s I in C = head(C) (del 1 at I in tail(C)) .

    eq receive nop C = C .
    eq receive ins(S,I,N) C = ins S at I in C .
    eq receive del(M,I,N) C = del M at I in C .

    ceq transform ins(S,I,N) ins(S',I',N') = ins(S,I,N) if I < I' .
    ceq transform ins(S,I,N) ins(S',I',N') = ins(S,s I,N) if I > I' .
    ceq transform ins(S,I,N) ins(S',I',N') = ins(S,s I,N) if N > N' .
    eq  transform ins(S,I,N) ins(S',I',N') = ins(S,I,N) [owise] .

    ceq transform ins(S,I,N) del(M,I',N') = ins(S,I,N) if I < I' .
    eq  transform ins(S,I,N) del(M,I',N') = ins(S,sd(I,1),N) [owise] .

    ceq transform del(M,I,N) ins(S,I',N') = del(M,I,N) if I < I' .
    eq  transform del(M,I,N) ins(S,I',N') = del(M,s I,N) [owise] .

    ceq transform del(M,I,N) del(M',I',N') = del(M,I,N) if I < I' .
    ceq transform del(M,I,N) del(M',I',N') = del(M,sd(I,1),N) if I > I' .

    eq  transform O O' = nop [owise] .

    eq transformlist O nil     = O .
    eq transformlist O O'      = transform O O' .
    eq transformlist O (O' OS) = transform (transformlist O OS) O' .
endm

mod CLIENTDATA is
    including OPERATIONS .

    sort Clientdata .
    sort IdOperation .

    op <_ | _ > : Oid AttributeSet -> Clientdata .
    op ackedSeqNo :_ : Nat -> Attribute .
    op (_, _) : Oid Operation -> IdOperation .
endm

view IdOperation from TRIV to CLIENTDATA is
    sort Elt to IdOperation .
endv

view Clientdata from TRIV to CLIENTDATA is
    sort Elt to Clientdata .
endv

mod SERVER is
    including CLIENTDATA .
    including SET{Oid} .
    including SET{Clientdata} .
    including LIST{IdOperation} .


    op Server : -> Cid .
    op clients :_ : Set{Clientdata} -> Attribute .
    op seqNo :_ : Nat -> Attribute .
    op operations :_ : List{IdOperation} -> Attribute .

    op oids : Set{Clientdata} -> Set{Oid} .

    var O  : Oid .
    var A  : AttributeSet .
    var CS : Set{Clientdata} .

    eq oids(empty) = empty .
    eq oids((< O | A > , CS)) = O, oids(CS) .
endm

mod CLIENT is
    including SERVER .

    op Client : -> Cid .
    op content :_     : Content -> Attribute .
    op seqNo :_       : Nat     -> Attribute .
    op out-channel :_ : MsgQueue -> Attribute .
    op in-channel :_  : MsgQueue -> Attribute .
    op operations-left :_ : Nat -> Attribute .
endm

mod SERVER-RULES is
    including CLIENT .

    sort Multicast .
    subsort Multicast < Configuration .

    op multicast_from_to_ : Operation Oid Set{Oid} -> Multicast .
    op filterops : Oid Nat List{IdOperation} -> List{Operation} .
    op receive : Oid Operation List{IdOperation} Nat -> Operation .
    op find : Nat List{IdOperation} -> IdOperation .
    op retransmit : IdOperation List{IdOperation} Nat -> Operation .

    vars A A' : AttributeSet .
    vars Q Q' : MsgQueue .
    vars O O' : Oid .
    vars I N  : Nat .
    var  OPS  : List{IdOperation} .
    var  OS   : Set{Oid} .
    var  CS   : Set{Clientdata} .
    var  M    : Operation .
    var  S    : Str .
    eq  filterops(O, N, nil)   = nil .
    ceq filterops(O, N, (O', M) OPS) = M filterops(O, N, OPS) if seq(M) >= N and O =/= O' .
    eq  filterops(O, N, (O', M) OPS) = filterops(O, N, OPS) [owise] .

    --- eq receive(O, M, OPS, N) = transformlist assignSeqNo(M, N) filterops(O, seq(M), OPS) [owise] .
    eq receive(O, M, OPS, N) = assignSeqNo(transformlist M filterops(O, seq(M), OPS), N) [owise] .

    ceq find(N, (O, M) OPS) = (O, M) if seq(M) == N .
    eq  find(N, (O, M) OPS) = find(N, OPS) [owise] .

    eq retransmit((O, M), OPS, N) = transformlist assignSeqNo(M, N) filterops(O, seq(M), OPS) .

    rl [server-receive] :
        < O  : Client | out-channel : (Q ~ (M from O to O')), A >
        < O' : Server | seqNo : N,
                        operations : OPS,
                        clients : (< O | A' >, CS) >
      =>
        < O  : Client | out-channel : Q, A >
        < O' : Server | seqNo : s N,
                        operations : ((O, assignSeqNo(M, N)) OPS),
                        clients : (< O | A' >, CS) >
        multicast receive(O, M, OPS, N) from O' to oids(CS) .

    rl [server-receive-nack] :
        < O  : Client | out-channel : (Q ~ nack(N)),
                        in-channel  : Q', A >
        < O' : Server | operations  : OPS,
                        seqNo : I, A' >
      =>
        < O  : Client | out-channel : Q,
                        in-channel  : ((retransmit(find(N, OPS), OPS, I) from O' to O) ~ Q'), A >
        < O' : Server | operations  : OPS,
                        seqNo : I, A' > .

    eq multicast M from O' to empty = none .

    eq < O : Client | in-channel : Q, A >
        multicast M from O' to (O, OS)
      =
        < O : Client | in-channel : ((M from O' to O) ~ Q), A >
        multicast M from O' to OS .
endm

mod CLIENT-RULES is
    including SERVER-RULES .

    vars A A' : AttributeSet .
    vars C C' : Content .
    vars O O' : Oid .
    vars Q Q' : MsgQueue .
    var  NZ   : NzNat .
    var  M    : Operation .
    var  N    : Nat .
    var  S    : Str .

    rl [user-inserts] :
        < O  : Client | content : (C C'),
                        seqNo : N,
                        out-channel : Q,
                        operations-left : NZ, A >
        < O' : Server | A' >
        next S
      =>
        < O  : Client | content : (C S C'),
                        seqNo : s N,
                        out-channel : ((ins(S, size(C), N) from O to O') ~ Q),
                        operations-left : sd(NZ, 1), A >
        < O' : Server | A' >
        next s S .

    rl [user-deletes] :
        < O  : Client | content : (C S C'),
                        seqNo : N,
                        out-channel : Q,
                        operations-left : NZ, A >
        < O' : Server | A' >
      =>
        < O  : Client | content : (C C'),
                        seqNo : s N,
                        out-channel : ((del(1, size(C), N) from O to O') ~ Q),
                        operations-left : sd(NZ, 1), A >
        < O' : Server | A' > .

    crl [user-receive] :
        < O : Client | content : C,
                       seqNo : N,
                       in-channel : (Q ~ (M from O' to O)), A >
      =>
        < O : Client | content : (receive M C),
                       seqNo : s N,
                       in-channel : Q, A >
      if seq(M) >= N .

    crl [user-receive] :
        < O : Client | seqNo : N,
                       in-channel : (Q ~ (M from O' to O)),
                       out-channel : Q', A >
      =>
        < O : Client | seqNo : N,
                       in-channel : Q,
                       out-channel : (nack(seq(M)) ~ Q'), A >
      if seq(M) < N .
endm

mod TEST is
    including CLIENT-RULES .

    subsort String < Oid .

    op max           : List{Nat}        -> Nat .
    op init          :                  -> Configuration .
    op init__        : Content Set{Oid} -> Configuration .
    op initclients__ : Content Set{Oid} -> Configuration .
    op initclients_  : Set{Oid}         -> Set{Clientdata} .

    var N  : Nat .
    var O  : Oid .
    var C  : Content .
    var L  : List{Nat} .
    var CF : Configuration .
    var OS : Set{Oid} .
    var CS : Set{Clientdata} .

    eq max(N)   = N .
    eq max(N L) = if N > max(L) then N else max(L) fi .

    eq init = init nil ("C1","C2") .

    eq init C OS =
        { < "S" : Server | seqNo : 0, clients : initclients OS, operations : nil >
          (initclients C OS)
          next if C == nil then 0 else s(max(C)) fi } .

    eq initclients C empty   = none .
    eq initclients C (O, OS) =
        < O : Client | content : C,
                       seqNo : 0,
                       out-channel : empty,
                       in-channel : empty,
                       operations-left : 3 >
        (initclients C OS) .

    eq initclients empty = empty .
    eq initclients (O, OS) = < O | ackedSeqNo : 0 >, initclients OS .
endm

mod PREDICATES is
    including TEST .
    including SATISFACTION .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .

    subsort Configuration < State .

    ops consistent inconsistent : -> Prop .
    op  ot-function : -> Prop .

    vars A A'  : AttributeSet .
    vars C C'  : Content .
    vars O O'  : Oid .
    vars OI OJ : Operation .
    var  CF    : Configuration .
    var  S     : System .

    ceq { < O  : Client | content : C,  A  >
          < O' : Client | content : C', A' >
          CF } |= inconsistent = true if C =/= C' .

    eq S |= inconsistent = false [owise] .

    eq S |= consistent = not S |= inconsistent .

    ceq { < O  : Client | content : (receive (transform OI OJ) (receive OJ C)), A >
          < O' : Client | content : (receive (transform OJ OI) (receive OI C)), A >
          CF } |= ot-function = false
        if receive (transform OI OJ) (receive OJ C) =/=
            receive (transform OJ OI) (receive OI C) .

    eq S |= ot-function = true [owise] .
endm

mod LOOP-STATE is
    including PREDICATES .

    op endstate : Configuration -> Bool .

    vars Q Q' : MsgQueue .
    var O     : Oid .
    var A     : AttributeSet .
    var M     : Msg .
    var CF    : Configuration .
    var CS    : Set{Clientdata} .
    var NZ    : NzNat .

    eq endstate(< O : Client | operations-left : NZ, A > CF)  = false .
    eq endstate(< O : Client | out-channel : (M ~ Q), A > CF) = false .
    eq endstate(< O : Client | in-channel : (M ~ Q'), A > CF) = false .
    eq endstate(CF) = true [owise] .

    crl { < O : Server | clients : CS, A > CF }
      =>
        init nil oids(CS)
      if endstate(CF) and ({ < O : Server | clients : CS > CF } |= consistent) .
endm
