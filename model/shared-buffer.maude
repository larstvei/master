load model-checker

--- Redefine CONFIGURATION in order to add formatting to objects.
mod CONFIGURATION is
    sorts Attribute AttributeSet .
    subsort Attribute < AttributeSet .
    op none : -> AttributeSet  [ctor] .
    op _,_ : AttributeSet AttributeSet -> AttributeSet
        [ctor assoc comm id: none format (s s n s)] .

    sorts Oid Cid Object Msg Portal Configuration .
    subsort Object Msg Portal < Configuration .
    op <_:_|_> : Oid Cid AttributeSet -> Object [ctor object format (n s s s s n n n)] .
    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration [ctor config assoc comm id: none] .
    op <> : -> Portal [ctor] .
endm

view Oid from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv

--- A string, in our model, is simply a blob; we are not interested in the
--- contents of it. We want every string to be unique, so we model strings
--- using natural numbers. NextStr keeps a single string, that should always be
--- unique (i.e. it has not occurred in any buffer before).

--- System just provides a way of encapsulating a configuration. This is useful
--- when we check for properties that concerns the entire configuration (not
--- just a subset).
mod GLOBAL is
    including NAT .
    including CONFIGURATION .
    including STRING .

    sorts NextStr OpsLeft Str System .

    subsort  Nat             < Str .
    subsort  String          < Oid .
    subsorts NextStr OpsLeft System  < Configuration .

    op {_}              : Configuration  -> System .
    op next_            : Str            -> NextStr [format (n s n)] .
    op operations-left_ : Nat            -> OpsLeft .
endm

--- Messages take the form of operations and acks. The server should perform
--- transformations and redistribute messages, clients should generate messages
--- and receive (possibly transformed) messages.
mod MSG is
    including GLOBAL .

    sort Operation .

    op nop : -> Operation [ctor] .
    op ins : Str Nat Nat -> Operation [ctor] .
    op del : Nat Nat Nat -> Operation [ctor] .
    op pri : Operation -> Nat .
    op assignPri : Operation Nat -> Operation .

    var S : Str .
    vars I N N' N'' : Nat .

    eq pri(nop) = 0 .
    eq pri(ins(S,N',N)) = N .
    eq pri(del(N',I,N)) = N .

    eq assignPri(nop, N) = nop .
    eq assignPri(ins(S, N', N''), N) = ins(S, N', N) .
    eq assignPri(del(N', I, N''), N) = del(N', I, N) .

    msg _from_to_seqNo_ : Operation Oid Oid Nat -> Msg .
    --- [format (r d d d d o)] .
endm

--- A simple message queue.
mod QUEUE is
    including MSG .
    sort MsgQueue .
    subsort Msg < MsgQueue .

    op empty : -> MsgQueue [ctor] .
    op _~_   : MsgQueue MsgQueue -> MsgQueue [ctor assoc id: empty] .
endm

view Operation from TRIV to MSG is
    sort Elt to Operation .
endv

--- Operations works on buffers (NOTE: remember to rename). We have two types
--- of operations, insertions and deletions. Operations can be received, if so,
--- they are applied. Given two operations, they can be transformed in a way
--- that satisfy the property
---     Oj ∘ T(Oi, Oj) ≡ Oi ∘ T(Oj, Oi)
mod OPERATIONS is
    including QUEUE .
    including LIST{Nat} .
    including LIST{Operation} .

    sort Content .
    subsort List{Nat} < Content .

    op ins_at_in_      : Str Nat    Content        -> Content .
    op del_at_in_      : Nat Nat    Content        -> Content .
    op apply__         : Operation  Content        -> Content .
    op transform__     : Operation  Operation      -> Operation .
    op transformlist__ : Operation List{Operation} -> Operation .

    var C               : Content .
    vars S S'           : Str .
    vars O O'           : Operation .
    vars OS             : List{Operation} .
    vars I I' M M' N N' : Nat .

    eq ins S at 0 in C   = S C .
    eq ins S at s I in C = head(C) (ins S at I in tail(C)) .

    *** Assuming N is 1, change this later?
    eq del 1 at 0 in C   = tail(C) .
    eq del 1 at s I in C = head(C) (del 1 at I in tail(C)) .

    eq apply nop C = C .
    eq apply ins(S,I,N) C = ins S at I in C .
    eq apply del(M,I,N) C = del M at I in C .

    ceq transform ins(S,I,N) ins(S',I',N') = ins(S,I,N) if I < I' .
    ceq transform ins(S,I,N) ins(S',I',N') = ins(S,s I,N) if I > I' .
    ceq transform ins(S,I,N) ins(S',I',N') = ins(S,s I,N) if N > N' .
    eq  transform ins(S,I,N) ins(S',I',N') = ins(S,I,N) [owise] .

    --- From original paper by Ellis et al.
    --- ceq transform ins(S,I,N) del(M,I',N') = ins(S,I,N) if I < I' .
    --- Fixed version introduced in formalOT by Imine et al.
    ceq transform ins(S,I,N) del(M,I',N') = ins(S,I,N) if I <= I' .
    eq  transform ins(S,I,N) del(M,I',N') = ins(S,sd(I,1),N) [owise] .

    ceq transform del(M,I,N) ins(S,I',N') = del(M,I,N) if I < I' .
    eq  transform del(M,I,N) ins(S,I',N') = del(M,s I,N) [owise] .

    ceq transform del(M,I,N) del(M',I',N') = del(M,I,N) if I < I' .
    ceq transform del(M,I,N) del(M',I',N') = del(M,sd(I,1),N) if I > I' .

    eq  transform O O' = nop [owise] .

    eq transformlist O nil     = O .
    eq transformlist O O'      = transform O O' .
    eq transformlist O (O' OS) = transform (transformlist O OS) O' .
endm

mod CLIENTDATA is
    including OPERATIONS .

    sorts OidSeq Clientdata IdOperation .

    op <_ | _ > : Oid AttributeSet -> Clientdata .
    op seqNo :_ : Nat -> Attribute .
    op (_, _) : Oid Operation -> IdOperation .
    op (_, _) : Oid Nat -> OidSeq .
endm

view IdOperation from TRIV to CLIENTDATA is
    sort Elt to IdOperation .
endv

view OidSeq from TRIV to CLIENTDATA is
    sort Elt to OidSeq .
endv

view Clientdata from TRIV to CLIENTDATA is
    sort Elt to Clientdata .
endv

mod SERVER is
    including CLIENTDATA .
    including LIST{Oid} .
    including SET{Clientdata} .
    including LIST{IdOperation} .
    including LIST{OidSeq} .
    including SET{Oid} .

    op Server : -> Cid .
    op clients :_ : Set{Clientdata} -> Attribute .
    op opsApplied :_ : Nat -> Attribute .
    op operations :_ : List{IdOperation} -> Attribute .

    op oids    : Set{Clientdata} -> Set{Oid} .
    op oidseqs : Set{Clientdata} -> List{OidSeq} .
    op incSeqs : Set{Clientdata} -> Set{Clientdata} .

    var O  : Oid .
    var N  : Nat .
    var A  : AttributeSet .
    var CS : Set{Clientdata} .

    eq oids(empty) = empty .
    eq oids((< O | seqNo : N, A > , CS)) = O, oids(CS) .

    eq oidseqs(empty) = nil .
    eq oidseqs((< O | seqNo : N, A > , CS)) = (O,N) oidseqs(CS) .

    eq incSeqs(empty) = empty .
    eq incSeqs((< O | seqNo : N, A > , CS)) = < O | seqNo : s N, A >, incSeqs(CS) .
endm

mod CLIENT is
    including SERVER .

    op Client         : -> Cid .
    op content :_     : Content  -> Attribute .
    op opsApplied :_  : Nat      -> Attribute .
    op expectedSeq :_ : Nat      -> Attribute .
    op out-channel :_ : MsgQueue -> Attribute .
    op in-channel :_  : MsgQueue -> Attribute .
endm

mod SERVER-RULES is
    including CLIENT .

    sort Multicast .
    subsort Multicast < Configuration .

    op multicast_from_to_ : Operation Oid List{OidSeq} -> Multicast .
    op filterops : Oid Nat List{IdOperation} -> List{IdOperation} .
    op extractops : List{IdOperation} -> List{Operation} .
    op updateops : List{IdOperation} List{IdOperation} Operation -> List{Operation} .
    op retransmit : List{Operation} Oid Oid Nat -> MsgQueue .
    op del : IdOperation List{IdOperation} -> List{IdOperation} .

    vars OPS OPS' : List{IdOperation} .
    vars A A' : AttributeSet .
    vars Q Q' : MsgQueue .
    vars O O' : Oid .
    vars I N N'  : Nat .
    vars M M' : Operation .
    var  OS   : List{OidSeq} .
    var  NS   : List{Nat} .
    var  CS   : Set{Clientdata} .
    var  MS   : List{Operation} .
    var  S    : Str .

    eq  filterops(O, N, nil) = nil .
    ceq filterops(O, N, (O', M) OPS) = (O', M) filterops(O, N, OPS) if pri(M) >= N and O =/= O' .
    eq  filterops(O, N, (O', M) OPS) = filterops(O, N, OPS) [owise] .

    eq extractops(nil) = nil .
    eq extractops((O', M) OPS) = M extractops(OPS) .

    eq del((O,M), OPS (O,M) OPS') = OPS OPS' .
    eq del((O,M), OPS) = OPS [owise] .

    eq  updateops(nil, OPS', M') = nil .
    ceq updateops(((O, M) OPS), OPS', M') =
        assignPri((transform M (transformlist M' MS)), pri(M'))
        updateops(OPS, OPS', M')
      if MS := extractops(del((O,M),OPS')) .

    eq retransmit(nil, O, O', N) = empty .
    eq retransmit((M MS), O, O', s N) =
        (M from O' to O seqNo s N) ~ retransmit(MS, O, O', N) .

    crl [server-receive] :
        < O  : Client | out-channel : (Q ~ (M from O to O' seqNo N')),
                        in-channel : Q', A >
        < O' : Server | opsApplied : N,
                        operations : OPS,
                        clients : (< O | seqNo : I, A' >, CS) >
      =>
        < O  : Client | out-channel : Q,
                        in-channel :
                        ((retransmit(updateops(OPS',OPS',assignPri(M,N)), O, O', I + size(MS))) ~ Q'), A >
        < O' : Server | opsApplied : s N,
                        operations : ((O, M') OPS),
                        clients : (< O | seqNo : (size(MS) + s I), A' >, incSeqs(CS)) >
        multicast M' from O' to oidseqs(CS)
      if OPS' := filterops(O, pri(M), OPS) /\
          MS  := extractops(OPS') /\
          M'  := transformlist assignPri(M, N) MS .

    eq multicast M from O' to nil = none .

    eq < O : Client | in-channel : Q, A >
        multicast M from O' to ((O,N) OS)
      =
        < O : Client | in-channel : ((M from O' to O seqNo N) ~ Q), A >
        multicast M from O' to OS .
endm

mod CLIENT-RULES is
    including SERVER-RULES .

    vars A A' : AttributeSet .
    vars C C' : Content .
    vars O O' : Oid .
    vars Q Q' : MsgQueue .
    vars N N' : Nat .
    var  NZ   : NzNat .
    var  M    : Operation .
    var  S    : Str .

    rl [user-inserts] :
        < O  : Client | content : (C C'),
                        opsApplied : N,
                        expectedSeq : N',
                        out-channel : Q, A >
        < O' : Server | A' >
        operations-left NZ
        next S
      =>
        < O  : Client | content : (C S C'),
                        opsApplied : N,
                        expectedSeq : s N',
                        out-channel :
                        ((ins(S, size(C), N) from O to O' seqNo N') ~ Q), A >
        < O' : Server | A' >
        operations-left sd(NZ, 1)
        next s S .

    rl [user-deletes] :
        < O  : Client | content : (C S C'),
                        opsApplied : N,
                        expectedSeq : N',
                        out-channel : Q, A >
        < O' : Server | A' >
        operations-left NZ
      =>
        < O  : Client | content : (C C'),
                        opsApplied : N,
                        expectedSeq : s N',
                        out-channel :
                        ((del(1, size(C), N) from O to O' seqNo N') ~ Q), A >
        < O' : Server | A' >
        operations-left sd(NZ, 1) .

    rl [user-receive] :
        < O : Client | content : C,
                       opsApplied : N',
                       expectedSeq : N,
                       in-channel : (Q ~ (M from O' to O seqNo N)), A >
      =>
        < O : Client | content : (apply M C),
                       opsApplied : s pri(M),
                       expectedSeq : s N,
                       in-channel : Q, A > .

    crl [user-receive-reject] :
        < O : Client | expectedSeq : N,
                       in-channel : (Q ~ (M from O' to O seqNo N')), A >
      =>
        < O : Client | expectedSeq : s N,
                       in-channel : Q, A > if N =/= N' .
endm

mod TEST is
    including CLIENT-RULES .
    including SET{Oid} .

    subsort String < Oid .

    op max           : List{Nat}        -> Nat .
    op init          :                  -> Configuration .
    op init__        : Content Set{Oid} -> Configuration .
    op initclients__ : Content Set{Oid} -> Configuration .
    op initclients_  : Set{Oid}         -> Set{Clientdata} .

    var N  : Nat .
    var O  : Oid .
    var C  : Content .
    var L  : List{Nat} .
    var CF : Configuration .
    var OS : Set{Oid} .
    var CS : Set{Clientdata} .

    eq max(N)   = N .
    eq max(N L) = if N > max(L) then N else max(L) fi .

    eq init = init nil ("C1","C2") .

    eq init C OS =
        { < "S" : Server | opsApplied : 0, clients : initclients OS, operations : nil >
          (initclients C OS)
          operations-left 3
          next if C == nil then 0 else s(max(C)) fi } .

    eq initclients C empty   = none .
    eq initclients C (O, OS) =
        < O : Client | content : C,
                       opsApplied : 0,
                       expectedSeq : 0,
                       out-channel : empty,
                       in-channel : empty >
        (initclients C OS) .

    eq initclients empty = empty .
    eq initclients (O, OS) = < O | seqNo : 0 >, initclients OS .
endm

mod PREDICATES is
    including TEST .
    including SATISFACTION .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .

    subsort Configuration < State .

    ops consistent inconsistent : -> Prop .
    op  ot-function : -> Prop .

    vars A A'  : AttributeSet .
    vars C C'  : Content .
    vars O O'  : Oid .
    vars OI OJ : Operation .
    var  CF    : Configuration .
    var  S     : System .

    ceq { < O  : Client | content : C,  A  >
          < O' : Client | content : C', A' >
          CF } |= inconsistent = true if C =/= C' .

    eq S |= inconsistent = false [owise] .

    eq S |= consistent = not S |= inconsistent .

    ceq { < O  : Client | content : (apply (transform OI OJ) (apply OJ C)), A >
          < O' : Client | content : (apply (transform OJ OI) (apply OI C)), A >
          CF } |= ot-function = false
        if apply (transform OI OJ) (apply OJ C) =/=
            apply (transform OJ OI) (apply OI C) .

    eq S |= ot-function = true [owise] .
endm

mod LOOP-STATE is
    including PREDICATES .

    op endstate : Configuration -> Bool .

    vars Q Q' : MsgQueue .
    var O     : Oid .
    var A     : AttributeSet .
    var M     : Msg .
    var CF    : Configuration .
    var CS    : Set{Clientdata} .
    var NZ    : NzNat .

    eq endstate(CF operations-left NZ) = false .
    eq endstate(< O : Client | out-channel : (M ~ Q), A > CF) = false .
    eq endstate(< O : Client | in-channel : (M ~ Q'), A > CF) = false .
    eq endstate(CF) = true [owise] .

    crl { < O : Server | clients : CS, A > CF }
      =>
        init nil oids(CS)
      if endstate(CF) and ({ < O : Server | clients : CS > CF } |= consistent) .
endm
