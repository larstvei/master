load prelude .
load model-checker.maude .
load full-maude .

(omod MSG is
    including NAT .
    including STRING .

    sorts MsgContent Str .
    subsort String < Oid .
    subsort Nat < Str .

    op ack : -> MsgContent [ctor] .
    op ins : Str Nat -> MsgContent [ctor] .
    op del : Nat Nat -> MsgContent [ctor] .

    msg _from_to_ : MsgContent Oid Oid -> Msg .
endom)

(omod CHANNEL is
    including MSG .
    sort MsgQueue .
    subsort Msg < MsgQueue .

    op empty : -> MsgQueue [ctor] .
    op _~_   : MsgQueue MsgQueue -> MsgQueue [ctor assoc id: empty] .
endom)

(omod SERVER is
    including CHANNEL .
    including SET{Oid} .

    class Server | chan : MsgQueue, clients : Set{Oid}, nextStr : Str .
endom)

(omod CLIENT is
    including SERVER .
    including LIST{Nat} .

    sort Content .
    subsort List{Nat} < Content .

    op ins_at_in_ : Str Nat Content -> Content .
    op del_at_in_ : Nat Nat Content -> Content .

    class Client | content : Content, seqNo : Str .

    vars C C' : Content .
    vars I N  : Nat .
    vars O O' : Oid .
    var S     : Str .
    var MS    : MsgQueue .

    eq ins S at 0 in C   = S C .
    eq ins S at s N in C = head(C) (ins S at N in tail(C)) .

    *** Assuming N is 1, change this later?
    eq del 1 at 0 in C   = tail(C) .
    eq del 1 at s I in C = head(C) (del 1 at I in tail(C)) .

    rl [user-inserts] :
        < O  : Client | content : C C', seqNo : S >
        < O' : Server | chan : MS >
      =>
        < O  : Client | content : C S C', seqNo : s S >
        < O' : Server | chan : (ins(S, size(C)) from O to O') ~ MS > .

    rl [user-deletes] :
        < O  : Client | content : C S C' >
        < O' : Server | chan : MS >
      =>
        < O  : Client | content : C S C' >
        < O' : Server | chan : (del(size(C), 1) from O to O') ~ MS > .

    rl [insert] :
        < O  : Client | content : C, seqNo : S >
        < O' : Server | chan : (ins(S, I) from O to O') ~ MS >
      =>
        < O' : Server | chan : MS >
        < O  : Client | content : ins(S,I,C) , seqNo : s S > .

    rl [delete] :
        < O  : Client | content : C, seqNo : S >
        < O' : Server | chan : (del(I, N) from O to O') ~ MS >
      =>
        < O  : Client | content : del(I,N,C) , seqNo : s S >
        < O' : Server | chan : MS > .
endom)

(omod TEST is
    including CLIENT .
    including SERVER .
    subsort String < Oid .
    op init : Content -> Configuration .   --- a suitable initial state

    var C : Content .

    eq init(C) =
        < "Server"  : Server | chan : empty >
        < "Client1" : Client | content : C, seqNo : 0 > .
endom)

*** Commands:

(search[1] init(nil) =>* < "Client1" : Client | content : 3 0 > C:Configuration .)
