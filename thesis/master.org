#+TITLE: Specification, verification and Implementation of a Real-Time Collaborative Editing Protocol
#+AUTHOR: Lars Tveito
#+EMAIL: larstvei@ifi.uio.no
#+OPTIONS: num:3 H:5 todo:nil
#+BIND: org-latex-title-command ""
#+BIND: org-latex-toc-command ""
#+LaTeX_CLASS_OPTIONS: [USenglish]
#+LaTeX_CLASS: ifimaster
#+LATEX_HEADER: \usepackage[backend=biber,bibencoding=utf8]{biblatex}
#+LATEX_HEADER: \usepackage{parskip, inconsolata}
#+LATEX_HEADER: \bibliography{ref}
#+LaTeX_HEADER: \urlstyle{sf}

#+LaTeX: \ififorside{}
#+LaTeX: \frontmatter{}
#+LaTeX: \maketitle{}

#+BEGIN_abstract
Placeholder for abstract.
#+END_abstract

#+LaTeX:\chapter*{Acknowledgments}

#+LaTeX: \tableofcontents{}
#+LaTeX: \listoffigures{}
#+LaTeX: \listoftables{}
#+LaTeX: \mainmatter{}

* TODO Introduction
** TODO Motivation
*** Personal motivation

    In 2013 [[http://lispnyc.org][LispNYC]], [[http://www.meetup.com/Clojure-NYC/][ClojureNYC]] and [[http://alu.org][Association of Lisp Users]] hosted a
    programming competition called [[http://lispinsummerprojects.org/][LISP In Summer Projects]], awarding cash
    prizes for Lisp-related projects. They gathered some great finalist judges:
    Matthias Felleisen, Richard Gabriel, Rich Hickey, Peter Norvig, Christian
    Queinnec and Taiichi Yuasa.

    Around the time of the announcement of the competition, I attended a course
    on functional programming, in which we were to collaborate on programming
    assignments in small teams (of two or three participants). Mostly, we
    programmed together whilst in the same room (physically), and at any given
    moment, the one with the most promising idea held the keyboard. Sometimes
    we all wanted to explore some idea, and we would have to type it out on
    separate computers, and synchronize our changes thereafter.

    At times we (or at least I) felt it broke our flow. I started investigating
    how to allow separate Emacs sessions communicate using network processes,
    and realized it was completely plausible to enable real-time collaboration
    in Emacs.

    Seeing the aforementioned competition announcement, I immediately decided
    that implementing real-time collaboration in Emacs would make the perfect
    project.

    My approach was quite naive, and it was developed in a "Ha! Now it seems to
    work!"-fashion. By the end of the summer I had a rough prototype that
    worked for what I deemed "the most common use-cases". It had a very serious
    problem: All changes were applied under the assumption of consistency
    between clients, but this assumption proved false in non-trivial use-cases.
    There was no recovery mechanism in place, and if consistency was breached,
    then it would be up to the /user/ to detect this, and reconnect.

    Still, the judges of the competition deemed the program worthy of second
    prize, awarding me 500$ for my efforts.

    It was by far the most ambitious project I've embarked on, and also the
    most rewarding. I was greatly honored for receiving the prize, and feel my
    gratitude should be expressed in /elegant/ Lisp code, that compose a
    working implementation of the program I wished I had written back in 2013.

** TODO Problem Statement

   Summarized to one sentence the problem can be stated as such:

   #+BEGIN_QUOTE
   The task is to specify, verify and implement a minimal network protocol
   that enables real-time collaborative editing in existing text editors.
   #+END_QUOTE

** TODO Background and Related Work
** TODO Outline of the Thesis
* TODO Formal Specification and Verification
** TODO Formal Methods and Model Checking
** TODO An informal Protocol Specification
** TODO Formalizing the Specification
** TODO Modeling the Specification in Maude
** TODO Specifying the System Properties using LTL
** TODO Verifying Properties using the Maude LTL-checker
* TODO Design and Implementation
** TODO Design Goals
** TODO Design Principles
** TODO Ensuring Portability
** TODO Languages and Tools
** TODO Server-side: Implementation of the Specification in Clojure
** TODO Client-side: Implementing a client in Emacs
* TODO Concluding remarks
** TODO The Caveats of the Resulting implementation
** TODO Noteworthy Results
** TODO The Influence of having a Formal Specification
** TODO Public Reception
** TODO Final Remarks and Future Work

 #+LaTeX: \backmatter{}
 #+LaTeX: \printbibliography
