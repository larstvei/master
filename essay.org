* Creating both static and dynamic content from a single markup language.

  In academics there is a large use of static documents, usually meaning PDF
  files. These are typically generated using Microsoft Word or LaTeX in the
  natural sciences(?). The PDF's are great, because they look good on most
  computer displays and can be printed out. The PDF's were great, until we
  all got 4-inch computers in our pocket; they really don't provide a good
  reading experience for PDF's.

  The favorable format for viewing content across devices is HTML (in
  combination with CSS and Javascript), which allow you to create dynamic
  content. HTML is, however, not the most pleasant markup language to type
  out. So when creating content that is built to fit a wide range of
  displays, there is probably some framework or CMS between your work and
  the result.
  # there is probably some program doing it's thing before your work turns
  # in to a dynamic web page. This can typically be a framework or a server
  # solution (i have no idea what I'm talking about).

  For work that contains a lot of math, formulas or code, the tool preferred
  by most is LaTeX. It allows you to do beautiful typesetting, and there is
  really no real competitive tool for writing math-heavy content. LaTeX also
  handles large projects, like books, with ease, and since the markup
  language is a complete (but not very general purpose) programming
  language, lot's of tasks are, or can be automated.

  # Now, there seems to be a need for both the static and the dynamic content
  # when writing scientific content. We'll focus on content that contains both
  # a lot of math, figures and code, that typically would be written in LaTeX.
  So let's assume, for now, that there is a need for both static and dynamic
  content. One could argue that if the dynamic content could produce an
  equally satisfying result as a specialized static document, there would be
  no use for the static document. But time hasn't proven web pages to be
  especially printer friendly, and few would like to read a book on the
  web. This is perhaps because the bright light from the screen yields an
  uncomfortable reading experience, but it could also be related to the fact
  that web pages traditionally provides a different sort of
  information. Rather than serving a full body of text that requires a
  concentrated read, the web is full of pages that provides quick answers to
  simple questions.

  The web is optimized for being able to share information across devices,
  and in it's typical use-case, beautiful typesetting seems to have received
  a low priority. Perhaps this is because there hasn't been expressed great
  longing for a web optimized for reading long text's, but perhaps a greater
  contributor is that it's difficult to implement. The superb kind of
  typesetting LaTeX produces is not a trivial task, and it is even more
  difficult if there is no way of telling what kind of display the content
  will be presented on.

** Solutions

*** LaTeX in the browser

    Perhaps the ideal solution would be to create a full LaTeX
    implementation in the browser, which could handle displays of different
    sizes. This is however quite the daunting 
    # This is, however, a daunting task, seeing that LaTeX is a huge
    # program, and whats worse, it's extendable, so there are an enormous
    # number of packages.

    # The size or complexity of a solution to a given problem should somehow be
    # proportional to the importance of the problem.
    
*** 
